<?xml version="1.0" encoding="UTF-8"?>
<?PowerDesigner AppLocale="UTF16" AutoAttach="FALSE" Code="DEFAULT COLUMNS" HasExtendedMetaClass="FALSE" ID="{D60A6DD0-CBC2-4787-B081-99FDDA6C333B}" LastModificationDate="1595654435" LibID="{B18A8271-9633-11D1-9914-006097355D9B}" Name="DEFAULT COLUMNS" Objects="925" Symbols="30" Type="{186C8AC3-D3DC-11D3-881C-00508B03C75C}" signature="XEM_XML" version="16.5.0.3982"?>
<!-- do not edit this file -->

<EXASET xmlns:a="attribute" xmlns:c="collection" xmlns:o="object">

<o:ExtendedModelDefinition Id="o1">
<a:ObjectID>D60A6DD0-CBC2-4787-B081-99FDDA6C333B</a:ObjectID>
<a:Name>DEFAULT COLUMNS</a:Name>
<a:Code>DEFAULT COLUMNS</a:Code>
<a:CreationDate>1592693611</a:CreationDate>
<a:Creator>Nogueira</a:Creator>
<a:ModificationDate>1595654435</a:ModificationDate>
<a:Modifier>Nogueira</a:Modifier>
<a:LibraryID>B18A8271-9633-11D1-9914-006097355D9B</a:LibraryID>
<a:CheckGlobalScript>&#39;******************************************************************************
&#39;* Purpose:  This VB-Script holds global definitions shared by all the custom-
&#39;*            checks scripts of the model extension.
&#39;******************************************************************************

Option Explicit &#39; This is to ensure all used variables are defined&#39;

&#39;Classe para salvar os dados de uma coluna
Class myColumn
    Public Name
    Public Domain
    Public Code
    Public DataType
    Public Position
    Public PrimaryKey
    Public Mandatory
End Class


&#39;Classe para salvar os dados de uma trigger(gatilho)
Class myTrigger
   Public Name
   Public Code
   Public Template
End Class


&#39;******************************************************************************
&#39; Funcao responsavel por criar uma variavel do tipo Array com objetos do tipo 
&#39; myColumn (Classe), onde esse Array vai conter todas as colunas padrao para 
&#39; todas as tabelas.
&#39;******************************************************************************
function DefaultColumns()
   &#39;Variaveis para salvar os dominios
   Dim DMID, DMUUID, DMUSER, DMDATETIME, DMINTEGRATION

   &#39; Pega os tipos de dominios e seta em uma variavel. Pois o dominio é um objeto
   Dim dom
   &#39; Passa por todos os dominios criados para pegar somente os que queremos
   for each dom in ActiveModel.Domains
      
      if dom.Name = &quot;DMID&quot; then
         Set DMID = dom
      elseif dom.Name = &quot;DMUUID&quot; then
         Set DMUUID = dom
      elseif dom.Name = &quot;DMUSER&quot; then
         Set DMUSER = dom
      elseif dom.Name = &quot;DMDATETIME&quot; then
         Set DMDATETIME = dom
      elseif dom.Name = &quot;DMINTEGRATION&quot; then
         Set DMINTEGRATION = dom
      end if
   Next
   &#39;ID
   Dim columnId
   Set columnId = New myColumn
   columnId.Name = &quot;ID_&quot;
   columnId.Code = &quot;ID_&quot;
   Set columnId.Domain = DMID
   columnId.Position = 0
   columnId.PrimaryKey = true
   columnId.Mandatory = true
   
   &#39;UUID
   Dim columnUuid
   Set columnUuid = New myColumn
   columnUuid.Name = &quot;UUID&quot;
   columnUuid.Code = &quot;UUID&quot;
   Set columnUuid.Domain = DMUUID
   columnUuid.Position = 1
   columnUuid.PrimaryKey = false
   columnUuid.Mandatory = true

   &#39;USER_CREATED
   Dim columnUsCreated
   Set columnUsCreated = New myColumn
   columnUsCreated.Name = &quot;USER_CREATED&quot;
   columnUsCreated.Code = &quot;USER_CREATED&quot;
   Set columnUsCreated.Domain = DMUSER
   columnUsCreated.Position = 2
   columnUsCreated.PrimaryKey = false
   columnUsCreated.Mandatory = true

   &#39;USER_LOGIN_CREATED
   Dim columnUsLoginCreated
   Set columnUsLoginCreated = New myColumn
   columnUsLoginCreated.Name = &quot;ID_ASTACCOU_LOGIN_CREATED&quot;
   columnUsLoginCreated.Code = &quot;ID_ASTACCOU_LOGIN_CREATED&quot;
   Set columnUsLoginCreated.Domain = DMID
   columnUsLoginCreated.Position = 3
   columnUsLoginCreated.PrimaryKey = false
   columnUsLoginCreated.Mandatory = true

   &#39;DT_CREATED
   Dim columnDtCreated
   Set columnDtCreated = New myColumn
   columnDtCreated.Name = &quot;DT_CREATED&quot;
   columnDtCreated.Code = &quot;DT_CREATED&quot;
   Set columnDtCreated.Domain = DMDATETIME
   columnDtCreated.Position = 4
   columnDtCreated.PrimaryKey = false
   columnDtCreated.Mandatory = true

   &#39;USER_ALTERED
   Dim columnUsAltered
   Set columnUsAltered = New myColumn
   columnUsAltered.Name = &quot;USER_ALTERED&quot;
   columnUsAltered.Code = &quot;USER_ALTERED&quot;
   Set columnUsAltered.Domain = DMUSER
   columnUsAltered.Position = 5
   columnUsAltered.PrimaryKey = false
   columnUsAltered.Mandatory = true

   &#39;USER_LOGIN_ALTERED
   Dim columnUsLoginAltered
   Set columnUsLoginAltered = New myColumn
   columnUsLoginAltered.Name = &quot;ID_ASTACCOU_LOGIN_ALTERED&quot;
   columnUsLoginAltered.Code = &quot;ID_ASTACCOU_LOGIN_ALTERED&quot;
   set columnUsLoginAltered.Domain = DMID
   columnUsLoginAltered.Position = 6
   columnUsLoginAltered.PrimaryKey = false
   columnUsLoginAltered.Mandatory = true

   &#39;DT_ALTERED
   Dim columnDtAltered
   Set columnDtAltered = New myColumn
   columnDtAltered.Name = &quot;DT_ALTERED&quot;
   columnDtAltered.Code = &quot;DT_ALTERED&quot;
   Set columnDtAltered.Domain = DMDATETIME
   columnDtAltered.Position = 7
   columnDtAltered.PrimaryKey = false
   columnDtAltered.Mandatory = true

   &#39;ID_INTEGRATION
   Dim columnIdIntegration
   Set columnIdIntegration = New myColumn
   columnIdIntegration.Name = &quot;ID_INTEGRATION&quot;
   columnIdIntegration.Code = &quot;ID_INTEGRATION&quot;
   Set columnIdIntegration.Domain = DMINTEGRATION
   columnIdIntegration.Position = 8
   columnIdIntegration.PrimaryKey = false
   columnIdIntegration.Mandatory = false

   Dim myColumns
   myColumns = Array( _
   columnId, _
   columnUuid, _
   columnUsCreated, _
   columnUsLoginCreated, _
   columnDtCreated, _
   columnUsAltered, _
   columnUsLoginAltered, _
   columnDtAltered, _
   columnIdIntegration )
   
   DefaultColumns = myColumns
end function


&#39;******************************************************************************
&#39; Funcao responsavel por criar uma variavel do tipo Array com objetos do tipo 
&#39; myTrigger (Classe), onde esse Array vai conter todas os dados padrao para 
&#39; criar uma trigger nas tabelas.
&#39;******************************************************************************
function DefaultTriggers( table )
   
   Dim triggerBeforeInsertCheck : Set triggerBeforeInsertCheck = New myTrigger
   triggerBeforeInsertCheck.Name = &quot;TBI_&quot; + table + &quot;_CHECK_00&quot;
   triggerBeforeInsertCheck.Code = &quot;TBI_&quot; + table + &quot;_CHECK_00&quot;
   triggerBeforeInsertCheck.Template = &quot;InsertBeforeCheckPositon00&quot;
   
   Dim triggerBeforeUpdateCheck : Set triggerBeforeUpdateCheck = New myTrigger
   triggerBeforeUpdateCheck.Name = &quot;TBU_&quot; + table + &quot;_CHECK_00&quot;
   triggerBeforeUpdateCheck.Code = &quot;TBU_&quot; + table + &quot;_CHECK_00&quot;
   triggerBeforeUpdateCheck.Template = &quot;UpdateBeforeCheckPosition00&quot;
   
   Dim triggerBeforeDeleteCheck : Set triggerBeforeDeleteCheck = New myTrigger
   triggerBeforeDeleteCheck.Name = &quot;TBD_&quot; + table + &quot;_CHECK_00&quot;
   triggerBeforeDeleteCheck.Code = &quot;TBD_&quot; + table + &quot;_CHECK_00&quot;
   triggerBeforeDeleteCheck.Template = &quot;DeleteBeforeCheckPosition00&quot;
   
   Dim triggerBeforeDelete : Set triggerBeforeDelete = New myTrigger
   triggerBeforeDelete.Name = &quot;TBD_&quot; + table
   triggerBeforeDelete.Code = &quot;TBD_&quot; + table
   triggerBeforeDelete.Template = &quot;DeleteTrigger&quot;
   
   Dim triggerBefoneInsert : Set triggerBefoneInsert = New myTrigger
   triggerBefoneInsert.Name = &quot;TBI_&quot; + table
   triggerBefoneInsert.Code = &quot;TBI_&quot; + table
   triggerBefoneInsert.Template = &quot;InsertTrigger&quot;
   
   Dim triggerBeforeUpdate : Set triggerBeforeUpdate = New myTrigger
   triggerBeforeUpdate.Name = &quot;TBU_&quot; + table
   triggerBeforeUpdate.Code = &quot;TBU_&quot; + table
   triggerBeforeUpdate.Template = &quot;UpdateTrigger&quot;
   
   Dim triggerAfterDeleteLog : Set triggerAfterDeleteLog = New myTrigger
   triggerAfterDeleteLog.Name = &quot;TAD_LOG_&quot; + table
   triggerAfterDeleteLog.Code = &quot;TAD_LOG_&quot; + table
   triggerAfterDeleteLog.Template = &quot;DeleteAfterLogPosition12&quot;
   
   Dim myListTriggers
   myListTriggers = Array( _
   triggerBeforeInsertCheck, _
   triggerBeforeUpdateCheck, _
   triggerBeforeDeleteCheck, _
   triggerBeforeDelete, _
   triggerBefoneInsert, _
   triggerBeforeUpdate, _
   triggerAfterDeleteLog )
   
   DefaultTriggers = myListTriggers
end function


&#39;******************************************************************************
&#39; Função para checar se a coluna já existe na tabela.
&#39;******************************************************************************
function ColumnExists(tab, name)
   &#39;output &quot;ClassName: &quot; + tab.ClassName
   
   &#39;Checa se a o objeto passano no parâmetro &quot;tab&quot; é do tipo Table (tabela)
   if tab.ClassName = &quot;Table&quot; then
      dim col
      &#39;Passa por todas as colunas da tabela
      for each col in tab.Columns
         &#39;Checa se o nome da coluna atual já existe igual ao passado por parâmetro (&quot;name&quot;)
         if col.Name = name then
            &#39;output &quot;... já existe &quot; + col.Name
            ColumnExists = true
            exit function
         end if
      next 
   end if
   ColumnExists = false
end function


&#39;******************************************************************************
&#39; Função responsável por criar as colunas padrao de uma tabela.
&#39;******************************************************************************
Sub DoCreateColumns(tab)
   &#39;output &quot;ClassName: &quot; + tab.ClassName
   
   &#39; Checa se o objeto passado no parâmetro (&quot;tab&quot;) é do tipo &quot;Table&quot;
   if not tab.ClassName = &quot;Table&quot; then exit sub
   dim c
   dim myColumns, column
 
   &#39; Executa a funcao &quot;DefaultColumns()&quot; para criar um array com todas as colunas padrão
   myColumns = DefaultColumns()
   
   &#39;Passa por todas as colunas salvas&#39;
   for each column in myColumns
       
       &#39;Checa se esta coluna é um ID
       if column.Name = &quot;ID_&quot; then
            &#39; Adiciona o nome da tabela junto com a palavra ID
            column.Name = &quot;ID_&quot; + tab.Name
            column.Code = column.Name
       end if
       
       &#39;Checa se a coluna ja existe
       if not ColumnExists(tab, column.Name) then
           &#39;set c = tab.CreateObject(cls_Column)
           set c = tab.Columns.CreateNewAt(column.Position) 
           c.Name = column.Name
           c.Code = column.Code
           c.domain = column.Domain
           &#39;c.PrimaryIdentifier = column.PrimaryKey
           c.Mandatory = column.Mandatory
           &#39;c.comment = &quot;... Criado como coluna padrão na data: &quot; + Now()
           output &quot;... adding column &quot; + column.Name + &quot; table &quot; + tab.Name
       end if
   next
    
End Sub


Sub DoCreateTriggers(tab)
   dim myListTriggers, myTrigger

   &#39; Pega a lista de Triggers padrão
   myListTriggers = DefaultTriggers( tab.Name )

   &#39; Passa por todas as trigger
   For Each myTrigger In myListTriggers
      &#39; Checa se a trigger ja existe
      if not TriggerExists(tab, myTrigger.Name) then
         &#39; Cria um modelo de trigger
         dim trig : set trig = tab.CreateObject(PDPdm.cls_Trigger)
         &#39; set trigger template
         SetTemplate trig, myTrigger.Template
      end if
   Next
End Sub


function SetTemplate(trg, typ)
   SetTemplate = false
   &#39; Pesquisa todos os template
   dim db : set db = trg.Model.DBMS
   &#39; in case of shared DBMS instead of embedded one
   if db.IsShortcut() then set db = db.TargetObject
   
   dim tm, found
   
   &#39; Passa por todos os templates já criados no DBMS
   for each tm in db.TriggerTemplates
      &#39; Checa se o template atual é o que foi passado no maprâmetro &quot;typ&quot;
      if tm.name = typ then
         set found = tm
         exit for
      end if
   next
   &#39; Se o template estiver vazio então sai da função
   if IsEmpty(found) then exit function
   
   &#39; create shortcut alongside the table
   dim fld : set fld = trg.Parent.Folder
   dim short : set short = found.CreateShortcut(fld)
   &#39; assign, and initialize
   set trg.TriggerTemplate = short
   output &quot;trg name: &quot; + trg.Name
   trg.InitFromTemplate
   SetTemplate = true
end function


function TriggerExists(tab, name)
   
   if tab.ClassName = &quot;Table&quot; then
      dim trg
      &#39; Pega todas as triggers que já existe na tabela
      for each trg in tab.triggers
         &#39; Checa se a trigger atual é a que foi passado no parâmetro &quot;name&quot;
         if trg.Name = name then
            TriggerExists = true
            exit function
         end if
      next
   end if
   TriggerExists = false
end function</a:CheckGlobalScript>
<c:Categories>
<o:TargetCategory Id="o2">
<a:ObjectID>411F850E-8589-4CC5-9B47-B7BF144B5247</a:ObjectID>
<a:Name>Generation</a:Name>
<a:CreationDate>1592693611</a:CreationDate>
<a:Creator>Nogueira</a:Creator>
<a:ModificationDate>1592693614</a:ModificationDate>
<a:Modifier>Nogueira</a:Modifier>
</o:TargetCategory>
<o:ProfileTargetItem Id="o3">
<a:ObjectID>5E1F60E0-96A0-4F9E-8DCA-7EDC58AF3736</a:ObjectID>
<a:Name>Profile</a:Name>
<a:CreationDate>1592693611</a:CreationDate>
<a:Creator>Nogueira</a:Creator>
<a:ModificationDate>1593137881</a:ModificationDate>
<a:Modifier>Nogueira</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TargetCategory Id="o4">
<a:ObjectID>38D87AAA-5F21-4390-91DA-A9291B200921</a:ObjectID>
<a:Name>Shared</a:Name>
<a:Code>Shared</a:Code>
<a:CreationDate>1592693611</a:CreationDate>
<a:Creator>Nogueira</a:Creator>
<a:ModificationDate>1592693614</a:ModificationDate>
<a:Modifier>Nogueira</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TargetCategory>
<o:MetaClassTargetItem Id="o5">
<a:ObjectID>0E607FF7-45BE-4587-9966-DFF94F50566B</a:ObjectID>
<a:Name>Table</a:Name>
<a:CreationDate>1592694330</a:CreationDate>
<a:Creator>Nogueira</a:Creator>
<a:ModificationDate>1593363981</a:ModificationDate>
<a:Modifier>Nogueira</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o6">
<a:TypePublicName>EventHandlerTargetItem</a:TypePublicName>
<a:ObjectID>0026C7F0-5045-4F0E-AA9C-E60786EA967D</a:ObjectID>
<a:Name>Event Handlers</a:Name>
<a:CreationDate>1592694330</a:CreationDate>
<a:Creator>Nogueira</a:Creator>
<a:ModificationDate>1592759305</a:ModificationDate>
<a:Modifier>Nogueira</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:EventHandlerTargetItem Id="o7">
<a:ObjectID>13717F6A-7D59-4C30-BBCC-99C691E7504D</a:ObjectID>
<a:Name>Initialize</a:Name>
<a:CreationDate>1592694330</a:CreationDate>
<a:Creator>Nogueira</a:Creator>
<a:ModificationDate>1592757909</a:ModificationDate>
<a:Modifier>Nogueira</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:HandlerScript>Function %Initialize%(obj)
   &#39; Implement your initialization on &lt;obj&gt; here
   &#39; and return True in case of success
   DoCreateColumns obj
   %Initialize% = True
End Function</a:HandlerScript>
</o:EventHandlerTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o8">
<a:TypePublicName>MenuTargetItem</a:TypePublicName>
<a:ObjectID>033BAC4D-C20D-4E69-9CA4-790A43DDAF6D</a:ObjectID>
<a:Name>Menus</a:Name>
<a:CreationDate>1592757910</a:CreationDate>
<a:Creator>Nogueira</a:Creator>
<a:ModificationDate>1594574953</a:ModificationDate>
<a:Modifier>Nogueira</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:MenuTargetItem Id="o9">
<a:ObjectID>6233542C-462E-4335-8A95-B4CCCDA841BA</a:ObjectID>
<a:Name>Create Default Columns</a:Name>
<a:MenuTargetItem.Value>&lt;Menu&gt;
   &lt;Command Name=&quot;CreateColumns&quot; Caption=&quot;Criar as colunas padrão&quot; /&gt;
&lt;/Menu&gt;</a:MenuTargetItem.Value>
<a:CreationDate>1592757910</a:CreationDate>
<a:Creator>Nogueira</a:Creator>
<a:ModificationDate>1592760058</a:ModificationDate>
<a:Modifier>Nogueira</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:MenuTargetItem>
<o:MenuTargetItem Id="o10">
<a:ObjectID>EB3FF9D9-893C-46AF-A4D5-E499C3A199E6</a:ObjectID>
<a:Name>Create Default Triggers</a:Name>
<a:MenuTargetItem.Value>&lt;Menu&gt;
   &lt;Command Name=&quot;CreateDefaultTriggers&quot; Caption=&quot;Criar as trigger&#39;s padrão&quot; /&gt;
&lt;/Menu&gt;</a:MenuTargetItem.Value>
<a:CreationDate>1594573996</a:CreationDate>
<a:Creator>Nogueira</a:Creator>
<a:ModificationDate>1594574953</a:ModificationDate>
<a:Modifier>Nogueira</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:MenuTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o11">
<a:TypePublicName>MethodTargetItem</a:TypePublicName>
<a:ObjectID>3DED501D-D779-4B5F-AC98-1583810C596A</a:ObjectID>
<a:Name>Methods</a:Name>
<a:CreationDate>1592760425</a:CreationDate>
<a:Creator>Nogueira</a:Creator>
<a:ModificationDate>1594574953</a:ModificationDate>
<a:Modifier>Nogueira</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:MethodTargetItem Id="o12">
<a:ObjectID>158BEB56-A730-43ED-9965-933016D1A71B</a:ObjectID>
<a:Name>CreateColumns</a:Name>
<a:CreationDate>1592760425</a:CreationDate>
<a:Creator>Nogueira</a:Creator>
<a:ModificationDate>1592760852</a:ModificationDate>
<a:Modifier>Nogueira</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:MethodScript>Sub %Method%(obj)
   &#39; Implement your method on &lt;obj&gt; here
   DoCreateColumns obj
End Sub</a:MethodScript>
</o:MethodTargetItem>
<o:MethodTargetItem Id="o13">
<a:ObjectID>D27960BC-56C4-427B-82DE-6084CAF09923</a:ObjectID>
<a:Name>CreateDefaultTriggers</a:Name>
<a:CreationDate>1594573996</a:CreationDate>
<a:Creator>Nogueira</a:Creator>
<a:ModificationDate>1594575854</a:ModificationDate>
<a:Modifier>Nogueira</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:MethodScript>Sub %Method%(obj)
   &#39; Implement your method on &lt;obj&gt; here
   DoCreateTriggers obj
End Sub</a:MethodScript>
</o:MethodTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:MetaClassTargetItem>
</c:Categories>
</o:ProfileTargetItem>
</c:Categories>
</o:ExtendedModelDefinition>

</EXASET>